// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package gen

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// Defines values for FormatEnum.
const (
	JSON FormatEnum = "JSON"
	TEXT FormatEnum = "TEXT"
)

// Defines values for LevelEnum.
const (
	DEBUG   LevelEnum = "DEBUG"
	ERROR   LevelEnum = "ERROR"
	INFO    LevelEnum = "INFO"
	WARNING LevelEnum = "WARNING"
)

// FormatEnum defines model for FormatEnum.
type FormatEnum string

// LevelEnum defines model for LevelEnum.
type LevelEnum string

// LoggingConfig defines model for LoggingConfig.
type LoggingConfig struct {
	Format FormatEnum `json:"format"`
	Level  LevelEnum  `json:"level"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get the current logging configuration
	// (GET /v1/logging/config)
	GetLoggingConfig(c *gin.Context)
	// Update the logging format
	// (PUT /v1/logging/{format})
	UpdateLoggingFormat(c *gin.Context, format FormatEnum)
	// Update the logging level
	// (PUT /v1/logging/{level})
	UpdateLoggingLevel(c *gin.Context, level LevelEnum)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetLoggingConfig operation middleware
func (siw *ServerInterfaceWrapper) GetLoggingConfig(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetLoggingConfig(c)
}

// UpdateLoggingFormat operation middleware
func (siw *ServerInterfaceWrapper) UpdateLoggingFormat(c *gin.Context) {

	var err error

	// ------------- Path parameter "format" -------------
	var format FormatEnum

	err = runtime.BindStyledParameterWithOptions("simple", "format", c.Param("format"), &format, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter format: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateLoggingFormat(c, format)
}

// UpdateLoggingLevel operation middleware
func (siw *ServerInterfaceWrapper) UpdateLoggingLevel(c *gin.Context) {

	var err error

	// ------------- Path parameter "level" -------------
	var level LevelEnum

	err = runtime.BindStyledParameterWithOptions("simple", "level", c.Param("level"), &level, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter level: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateLoggingLevel(c, level)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/logging/config", wrapper.GetLoggingConfig)
	router.PUT(options.BaseURL+"/v1/logging/:format", wrapper.UpdateLoggingFormat)
	router.PUT(options.BaseURL+"/v1/logging/:level", wrapper.UpdateLoggingLevel)
}
